<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Docker | Bowen's Blog]]></title>
  <link href="http://iambowen.github.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://iambowen.github.com/"/>
  <updated>2016-11-19T22:34:38+11:00</updated>
  <id>http://iambowen.github.com/</id>
  <author>
    <name><![CDATA[Bowen Ma]]></name>
    <email><![CDATA[iambowen.m@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Dockerising a Frontend Build Pipeline]]></title>
    <link href="http://iambowen.github.com/docker/ci/2016/08/16/on-dockerising-a-frontend-build-pipeline"/>
    <updated>2016-08-16T15:08:58+10:00</updated>
    <id>http://iambowen.github.com/docker/ci/2016/08/16/on-dockerising-a-frontend-build-pipeline</id>
    <content type="html"><![CDATA[<p>最近花了一段时间把主站的build pipeline docker化了，时间长到感觉自己的reputation都要被毁了。
在此总结下这个过程以及碰到的问题，希望对大家能有所帮助。</p>

<h3>背景</h3>

<p>这是一个纯前端的项目，两年前前后端分离的时候的项目，Grunt workflow，测试框架使用Karma，用Phantomjs<code>1.8.2</code>运行headless的测试，开发环境使用Chrome/Safari做功能性测试。开发环境基于node <code>0.12</code>，一些基础设施的更新，部署的脚本，smoke test是基于Ruby的，版本为<code>2.0</code>。</p>

<p>这个前端的工程部署在两个不同的AWS Region的S3上，互为fail over，最前面有Akamai为它们做负载均衡。</p>

<p>持续集成的工具使用Bamboo，其agent需要有<code>ruby 2.0</code>，<code>node 0.12</code>，<code>Phantomjs 1.8.2</code>的环境才可以运行具体的任务。整个过程已经做到了持续部署，一个完整的build过程如下：</p>

<ol>
<li>提交代码</li>
<li>trigger build，执行单元测试和集成测试</li>
<li>自动部署staging 环境</li>
<li>自动部署production 环境</li>
<li>对部署后的产品做性能测试</li>
<li>上传工程中依赖的第三方类库信息到S3 bucket(出于安全的考虑)</li>
</ol>


<h3>存在的问题</h3>

<p>太长时间没有人做技术上的升级，导致下面的一些隐患和问题：
1. 开发的工具版本落后，node当前版本已经是<code>6.3</code>了，ruby 2.0的版本应该已经不维护了，同样，对应的Karma，Phantomjs都以及更新了很多
2. 运行build依赖的agent是共用的，如果有人对agent的环境进行修改，会影响该项目的持续集成
3. 未来需要将CI工具从Bamboo迁移到Buildkite，用pipeline as code的方式去构建，每个组自己去管理build agent，使用Docker会更加方便迁移</p>

<h3>过程以及遇到的一些难点</h3>

<p>测试部分通过的过程及问题
1. 首先做的事情是构建一个基础的docker 镜像，包含最新的node <code>6.3.1</code>，phantomjs <code>2.1.1</code>，后来发现其实不用Phantomjs，这个有点多余了。 成果在这里: <a href="https://github.com/iambowen/node_on_docker%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E6%A0%B7%E7%9A%84%E7%8E%AF%E5%A2%83%E6%9B%B4%E5%8A%A0%E9%80%9A%E7%94%A8%E4%BA%9B%EF%BC%8C%E6%89%80%E4%BB%A5%E6%89%8Dpublish%E5%88%B0%E5%AE%98%E6%96%B9%E7%9A%84docker">https://github.com/iambowen/node_on_docker%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%BF%99%E6%A0%B7%E7%9A%84%E7%8E%AF%E5%A2%83%E6%9B%B4%E5%8A%A0%E9%80%9A%E7%94%A8%E4%BA%9B%EF%BC%8C%E6%89%80%E4%BB%A5%E6%89%8Dpublish%E5%88%B0%E5%AE%98%E6%96%B9%E7%9A%84docker</a> repository里面。
2. 在这个镜像的基础上，构建一个我们工程依赖环境的基础镜像，额外安装了Ruby <code>2.3</code>，最新的Chrome，git以及一些git的配置，因为需要从企业版github上pull代码。
3. 本地升级node版本，以及相关的grunt，karma，Phantomjs的版本，运行测试通过。
4. 将工程mount容器中，然后运行测试，<code>npm install</code>失败，原因是安装<code>fsevent</code>出错。查看了下这个包，原来只是给OSX下使用的。删除<code>npm-shrinkwrap.json</code>后重新运行可以通过。原因是有人在OSX下运行了<code>npm shrinkwrap</code>去生成的这个锁定版本的文件，真是烦人。于是反其道行之在容器里面生成<code>npm-shrinkwrap.json</code>，在host上运行测试一切完好，就这样解决了这个问题。
5. 在Bamboo创建一个branch，然后针对我的分支代码运行测试
6. 测试里面的一个步骤是做<code>bower install</code>安装第三方js类库，但是比较恶心的是，有些第三方类库是以<code>git</code>的协议去下载，而不是<code>https</code>。本地运行一切都好，但是在Bamboo Agent上运行的时候却出现了连接超时的问题，很有可能是Bamboo所在AWS的network ACL或者是security group没有允许<code>9418</code>端口的TCP访问。不过最后解决的方式并不是修改防火墙或者将协议改为<code>https</code>，而是直接把类库checking到git中，这样对应的修改Gruntfile，不用再运行<code>bower install</code>。check in之后在Bamboo上运行还是失败，本地却可以通过，仔细检查，原来是一部分bower module目录名为<code>dist</code>被git ignore掉了。</p>

<p>通过测试后，接下来就是部署了。部署要解决的问题是，如何让容器拿到AWS role的动态权限去做文件的上传更新操作。ECS好像是支持容器去assume role的操作，但是我们没有用ECS，所以只能考虑其它方式。</p>

<p>我想到的方式在bamboo 的 docker agent上 <code>assume role</code>，拿到对应的credential后，将其作为环境变量传入到容器中。实验证明这样的方式是可行的，万幸bamboo的docker agent支持aws cli命令，不过没有<code>jq</code>稍微增大了点提取credential的难度，脚本如下：</p>

<pre><code>if [ "$DEPLOY_ENV" = "staging" ]; then
  AWS_ACCOUNT_ID='1111111111'
elif [ "$DEPLOY_ENV" == "production" ]; then
  AWS_ACCOUNT_ID='2222222222'
fi

credentials=$(aws sts assume-role  --role-arn       arn:aws:iam::"$AWS_ACCOUNT_ID":role/roleName \
          --role-session-name roleSessionName \
            --query 'Credentials.[SecretAccessKey, SessionToken, AccessKeyId]'  \
            --output text)

SecretAccessKey=$(echo $credentials | cut -d' ' -f1)
SessionToken=$(echo $credentials | cut -d' ' -f2)
AccessKeyId=$(echo $credentials | cut -d' ' -f3)

docker run  -e BUILD_VERSION="$BUILD_VERSION" \
    -e DEPLOY_ENV="$DEPLOY_ENV" -e AWS_SECRET_ACCESS_KEY="$SecretAccessKey" \
    -e AWS_SESSION_TOKEN="$SessionToken" -e AWS_ACCESS_KEY_ID="$AccessKeyId" --rm docker_image bash -c 'grunt deploy'
</code></pre>

<p>因为部署是用aws node 的sdk，所以读取的环境变量名字不太一样，要稍微注意下。</p>

<p>在CI上运行后，staging部署通过，手动在bamboo的docker agent上测试下是否能assume产品环境的部署的role，结果可以，那就是说产品环境的部署应该也可以通过了。</p>

<h3>总结</h3>

<ol>
<li><code>npm</code> sucks，更糟糕的是程序员在引入依赖的时候缺乏考虑，我在<code>package.json</code>里面见到了不少无人维护的component，后续的升级维护是一个问题，联想以前的ruby项目也是一样。一旦有版本升级，碰到无人维护的gem时会非常痛苦。</li>
<li>一个工程里面用了太多的语言，也是一件很糟糕的事情，明明可以用node的aws sdk来做到所有的部署，不知道为何用ruby去实现，无形中增大了维护的成本。</li>
<li>一般来说，我们认为docker可以保证不同环境的一致性，但是由于一些特殊原因，如我上面提到的防火墙问题，bower module被git ignore掉的问题，在CI环境下才能暴露出来。所以在PR被merge到master之前，一定要保证修改在CI上也运行通过。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One Interesting Docker Issue]]></title>
    <link href="http://iambowen.github.com/docker/2016/08/11/one-interesting-docker-issue"/>
    <updated>2016-08-11T17:52:10+10:00</updated>
    <id>http://iambowen.github.com/docker/2016/08/11/one-interesting-docker-issue</id>
    <content type="html"><![CDATA[<p>项目上Akamai的回归测试运行在数据中心一台用Puppet管理的固定的虚拟服务器上，这台服务器是Bamboo Agent，负责运行所有遗留系统的自动化部署任务。
前几天一个客户的Ops找我帮忙一起让这台服务器支持Docker，然后将测试放在docker中运行。我们修改puppet脚本，然后更新了Docker，结果发现2.6的内核最多运行docker 1.7，而运行测试的docker compose需要的docker客户端要高于1.7。 鉴于改动较大，于是我们换一种思路，用在AWS账户下已有的Bamboo docker agent去运行测试。所以revert了Puppet修改，并且在服务器上运行。
以为一切都结束了，没想到过了几天，另一个组的Ops来找我说staging的部署失败了，问我什么原因，提示大意是没有找到NetScaler服务器的路由。我觉得很奇怪，就看了眼服务器上的路由表。结果发现了下面的现象：
<code>
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
172.17.0.0      *               255.255.0.0     U     0      0        0 docker0
</code>
囧，staging的IP range也是<code>172.17</code>，原来是这个原因。
于是，先停止这个网络设备，然后删除，之后再重启网络服务解决问题。</p>

<pre><code class="bash">ip link down docker0
ip link del docker0
service network restart
</code></pre>

<p>我觉得从这个错误中可以学到两个事情</p>

<ol>
<li>配置管理工具的不可靠性，Puppet并没有完整的清理掉所有docker相关的东西</li>
<li>这种<code>Pet</code>服务器的不可靠性，如果服务器是每天都按照配置重新创建也不会出现这样的问题</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Speed Up Downloading Docker Images by Using Daocloud Mirror]]></title>
    <link href="http://iambowen.github.com/docker/2015/08/03/speed-up-downloading-docker-images-by-using-daocloud-mirror"/>
    <updated>2015-08-03T00:00:00+10:00</updated>
    <id>http://iambowen.github.com/docker/2015/08/03/speed-up-downloading-docker-images-by-using-daocloud-mirror</id>
    <content type="html"><![CDATA[<p>因为要试用下<a href="http://hyper.sh/">hyper</a>这个新工具，不得不去下载docker镜像，不过官方的registry
简直慢如狗，加了VPN也很慢。以前有个docker.cn的镜像源也不见了，不过在搜索的时候发现了国内的一家容器
公司<a href="http://daocloud.io/">daocloud</a>提供了免费的镜像服务。抱着试一试的态度，注册了个账号，在个人
的dashboard页面点击“加速器”，就可以看到定制的镜像链接，如“<a href="http://xxxxxxxx.m.daocloud.io%E2%80%9D%E3%80%82">http://xxxxxxxx.m.daocloud.io%E2%80%9D%E3%80%82</a>
下面的文档中给出了不同系统下配置镜像的方法，我的host是Ubuntu系统，需要做如下的修改:</p>

<pre><code class="bash">echo "DOCKER_OPTS=\"\$DOCKER_OPTS --registry-mirror=http://d32e3878.m.daocloud.io\"" | sudo tee -a /etc/default/docker
sudo service docker restart
</code></pre>

<p>再试着pull一下新的image.</p>

<pre><code class="bash">vagrant@vagrant-ubuntu-trusty-64:~$ time docker pull ubuntu
Pulling repository ubuntu
d2a0ecffe6fa: Download complete
83e4dde6b9cf: Download complete
b670fb0c7ecd: Download complete
29460ac93442: Download complete
Status: Downloaded newer image for ubuntu:latest

real    2m0.469s
user    0m0.034s
sys 0m0.034s
</code></pre>

<p>这是我在公司里面下载70m左右的容器镜像所耗时间，其实在家只要30s左右，公司网络太差了。</p>

<p>Anyway, 虽然镜像流量使用配额只有1000GB，但是一般情况下应该是够用了，为daocloud公司点个赞，良心企业。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running Containers in Docker]]></title>
    <link href="http://iambowen.github.com/docker/2015/01/16/running-containers-in-docker"/>
    <updated>2015-01-16T00:00:00+11:00</updated>
    <id>http://iambowen.github.com/docker/2015/01/16/running-containers-in-docker</id>
    <content type="html"><![CDATA[<p>既然有了boot2docker,不妨下几个容器来玩玩。先看下本地的docker服务的信息。</p>

<pre><code class="bash">docker@boot2docker:~$ docker info
Containers: 0
Images: 0
Storage Driver: aufs
Root Dir: /mnt/sda1/var/lib/docker/aufs
Dirs: 0
Execution Driver: native-0.2
Kernel Version: 3.16.7-tinycore64
Operating System: Boot2Docker 1.4.1 (TCL 5.4); master : 86f7ec8 - Tue Dec 16 23:11:29 UTC 2014
CPUs: 4
Total Memory: 1.961 GiB
Name: boot2docker
ID: L5JR:QYWN:KEDD:FQ4O:66IY:FUE6:OXTA:SWAE:UV2R:LFCF:7H6H:PTS5
Debug mode (server): true
Debug mode (client): false
Fds: 10
Goroutines: 11
EventsListeners: 0
Init Path: /usr/local/bin/docker
Docker Root Dir: /mnt/sda1/var/lib/docker

docker@boot2docker:~$ ps aux | grep [/]usr/local/bin/docker
690 root     /usr/local/bin/docker -d -D -g /var/lib/docker -H unix:// -H tcp://0.0.0.0:2376 --tlsverify --tlscacert=/var/lib/boot2docker/tls/ca.pem --tlscert=/var/lib/boot2docker/tls/server.pem --tlskey=/var/lib/boot2docker/tls/serverkey.pem
</code></pre>

<p>从docker的后台进程可以看到，后台服务监听2376端口，同时支持tls加密协议。</p>

<p>Docker的官方镜像的入口在<a href="https://registry.hub.docker.com/">Docker Hub Registry</a>，镜像文件放在了亚马逊AWS上，这对于国内的用户就比较悲剧了，因为要么是访问不到镜像文件，要么就是下载太慢。万幸的是，国内现在已经有了docker registry 的mirror - <a href="https://docker.cn/">docker.cn</a>。
所以在pull或者运行容器的时候，需要在镜像前加上registry的ip或者主机名。我觉得更好的方式是可以将registry写在配置文件中，这样可以避免这个麻烦，不过目前还没有看到这样的解决方案。
So</p>

<pre><code class="bash">docker@boot2docker:~$ docker run -i -t docker.cn/docker/ubuntu /bin/bash
Unable to find image 'docker.cn/docker/ubuntu:latest' locally
Pulling repository docker.cn/docker/ubuntu
8eaa4ff06b53: Download complete
511136ea3c5a: Download complete
3b363fd9d7da: Download complete
607c5d1cca71: Download complete
f62feddc05dc: Download complete
Status: Downloaded newer image for docker.cn/docker/ubuntu:latest
root@0b8874d6f2c8:/#
</code></pre>

<p>这条命令的意思是保持标准输入打开状态<code>-i</code>，并且Docker要为容器分配一个伪终端(tty)<code>-t</code>。Docker daemon首先在本地寻找名为<code>docker.cn/docker/ubuntu</code>的镜像，找不到的话，在去docker.cn下载。
从镜像下载的方式我们大概可以判断整个镜像是分层的，像git一样有版本管理，这个就是<code>aufs</code>文件系统的作用。镜像下载完成，容器启动后执行了bash命令，可以认为是来到了容器运行的操作系统中。
之后就可以像使用一个Ubuntu系统一样去使用这个容器了。</p>

<pre><code class="bash">root@0b8874d6f2c8:/# ip a
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
inet 127.0.0.1/8 scope host lo
valid_lft forever preferred_lft forever
inet6 ::1/128 scope host
valid_lft forever preferred_lft forever
6: eth0: &lt;BROADCAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default
link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff
inet 172.17.0.2/16 scope global eth0
valid_lft forever preferred_lft forever
inet6 fe80::42:acff:fe11:2/64 scope link
valid_lft forever preferred_lft forever
</code></pre>

<p>可以看到容器有自己的eth0网络设备以及由Docker分配的一个ip地址，和host machine没太大区别。</p>

<pre><code class="bash">root@0b8874d6f2c8:/# vim
bash: vim: command not found
root@0b8874d6f2c8:/# apt-get install -y vim
</code></pre>

<p>没有vim，赶快装一个。</p>

<p>随之退出控制台，容器也停止运行。</p>

<pre><code class="bash">docker@boot2docker:~$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
docker@boot2docker:~$ docker ps -l
CONTAINER ID        IMAGE                           COMMAND             CREATED             STATUS                          PORTS               NAMES
0b8874d6f2c8        docker.cn/docker/ubuntu:14.04   "/bin/bash"         15 hours ago        Exited (0) About a minute ago                       naughty_darwin
</code></pre>

<p>使用<code>docker ps</code>命令可以查看运行时的容器，对于停止的容器，可以通过 <code>docker ps -l</code> 或者 <code>docker ps -a</code>可以看到所有的容器。
容器启动时通过<code>--name</code>选项可以指定容器的名字，缺省会随机给出一个名字，很诡异的一个设计，不能理解。
有名字的好处就是就是容易记忆或者查看，否则如果只能按照containerid那串hash code使用，想来就有些头大。</p>

<p>重新启动停止的容器</p>

<pre><code class="bash">docker@boot2docker:~$ docker start 0b8874d6f2c8
0b8874d6f2c8
docker@boot2docker:~$ docker ps
CONTAINER ID        IMAGE                           COMMAND             CREATED             STATUS              PORTS               NAMES
0b8874d6f2c8        docker.cn/docker/ubuntu:14.04   "/bin/bash"         15 hours ago        Up 3 seconds                            naughty_darwin
</code></pre>

<p>通过<code>docker attach</code>命令可以重新连接到容器上。</p>

<pre><code class="bash">docker@boot2docker:~$ docker attach 0b8874d6f2c8
root@0b8874d6f2c8:/# which vim
/usr/bin/vim
</code></pre>

<p>上次安装的vim依然在，可见docker保存了容器的状态(persistence)。
前面所创建的容器是交互式的容器，而实际的使用当中，我们需要容器去运行程序或者服务，这种又称为daemonized container. 下面是一个简单的例子:</p>

<pre><code class="bash">docker@boot2docker:~$ docker run --name awesomeness -d ubuntu /bin/sh -c "while :; do echo hello; sleep 5; done"
1bda4fdc3a3b869d1dc58bb4564b08e1bc0c0f24372f48afb8bcc4291cc94929
docker@boot2docker:~$ docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
1bda4fdc3a3b        ubuntu:latest       "/bin/sh -c 'while :   55 seconds ago      Up 54 seconds                           awesomeness
</code></pre>

<p>使用<code>docker logs</code>命令可以查看容器的日志:</p>

<pre><code class="bash">docker@boot2docker:~$ docker logs awesomeness
hello
hello
hello
hello
hello
hello
</code></pre>

<p>加上<code>-t</code>选项可以输出时间戳，<code>-f</code>跟踪最新的日志:</p>

<pre><code class="bash">docker@boot2docker:~$ docker logs -ft awesomeness
2015-01-17T13:17:43.827474614Z hello
2015-01-17T13:17:48.842826627Z hello
2015-01-17T13:17:53.847642897Z hello
2015-01-17T13:17:58.856081585Z hello
2015-01-17T13:18:03.863587257Z hello
</code></pre>

<p>查看容器内的进程:</p>

<pre><code class="bash">docker@boot2docker:~$ docker top awesomeness
PID                 USER                COMMAND
922                 root                /bin/sh -c while :; do echo hello; sleep 5; done
1454                root                sleep 5
</code></pre>

<p>通过Docker在容器内部启动新的进程，执行新的任务:</p>

<pre><code class="bash">docker@boot2docker:~$ docker exec -d awesomeness touch /tmp/testfile
docker@boot2docker:~$ docker exec -t -i  awesomeness  /bin/bash
root@1bda4fdc3a3b:/# ls -al /tmp/testfile
-rw-r--r-- 1 root root 0 Jan 17 14:03 /tmp/testfile
</code></pre>

<p>不得不说docker的发展真的很快，我最开始使用的时候docker的版本大概是在0.6，当时的容器技术还是使用lxc，
只能用<code>lxc attach</code>命令才能连接到运行的容器的控制台。现在使用这么简单，必须要点个赞。</p>

<p>停止运行的容器:</p>

<pre><code class="bash">docker stop awesomeness   # 用containerid 1bda4fdc3a3b 效果相同
</code></pre>

<p>在容器意外退出时，自动重启容器:</p>

<pre><code class="bash">docker@boot2docker:~$ docker run --restart=always --name awesomeness -d ubuntu /bin/sh -c "while :; do echo hello; sleep 5; done"
</code></pre>

<p>还可以设置重启的次数，<code>--restart=on-failure:5</code>。这个功能也很不错，让容器拥有了一定的自恢复(self-healing)能力，</p>

<p>查看容器的信息:</p>

<pre><code class="bash">docker@boot2docker:~$ docker inspect awesomeness
[{
  "AppArmorProfile": "",
  "Args": [
  "-c",
  "while :; do echo hello; sleep 5; done"
  ],
  "Config": {
    "AttachStderr": false,
    "AttachStdin": false,
    "AttachStdout": false,
    "Cmd": [
    "/bin/sh",
    "-c",
    "while :; do echo hello; sleep 5; done"
    ],
    "CpuShares": 0,
    "Cpuset": "",
    "Domainname": "",
    "Entrypoint": null,
........
</code></pre>

<p>inspect可以返回JSON格式的详细配置信息，不过这个信息略多，通过<code>--format</code>可以格式化输出的内容，假设我只想看到容器的IP地址:</p>

<pre><code class="bash">docker@boot2docker:~$ docker inspect --format '' awesomeness
172.17.0.3
</code></pre>

<p>有点像调用了<code>jq</code>命令。</p>

<p>删除容器的命令是<code>docker rm CONTAINER_ID or CONTAINER_NAME</code>，这个操作只能针对已经停止运行的容器。删除所有容器的命令是:</p>

<pre><code>docker rm `docker ps -a -q`
</code></pre>

<p>这个命令会返回所有容器的ID，然后执行删除操作。实际的使用中我们可能只是删除部分的容器，可能就得结合<code>cut</code>,<code>grep</code>或者<code>awk</code>等命令来拿到要删除的容器ID/名字，然后再去执行删除操作。</p>
]]></content>
  </entry>
  
</feed>
