<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ssh | Bowen's Blog]]></title>
  <link href="http://iambowen.github.com/blog/categories/ssh/atom.xml" rel="self"/>
  <link href="http://iambowen.github.com/"/>
  <updated>2016-11-19T22:34:38+11:00</updated>
  <id>http://iambowen.github.com/</id>
  <author>
    <name><![CDATA[Bowen Ma]]></name>
    <email><![CDATA[iambowen.m@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[更加安全和简单的方式通过堡垒机ssh]]></title>
    <link href="http://iambowen.github.com/ssh/security/2015/12/19/ssh-securely-and-handy"/>
    <updated>2015-12-19T17:24:30+11:00</updated>
    <id>http://iambowen.github.com/ssh/security/2015/12/19/ssh-securely-and-handy</id>
    <content type="html"><![CDATA[<p>理想情况下的运维，是不需要ops去ssh到服务器上检查问题(包括安全问题)/日志等，这些是可以通过更好
监控,如使用newrelic,或者更好的日志收集系统，如splunk等去避免。不过现实不总是完美的，加上历史
遗留的原因，ops总是会ssh到堡垒机(bastion host)，然后跳转到目标服务器去做操作。</p>

<p>于是，就有很多人(包括我)在堡垒机上生成key/pair, 而且private key很少加密(包括我)，这个存在
很严重的安全风险。</p>

<p>一个比较合理的方式是通过ssh proxy的方式去访问目标服务器，这样不需要把key暴露给bastion，比如:</p>

<pre><code class="bash"> ~&gt; ssh -L 3333:destination_host:22 user@bastion
</code></pre>

<p>然后再启动一个新的ssh进程去通过proxy连接:</p>

<pre><code class="bash"> ~&gt; ssh -p 3333 user@0
</code></pre>

<p>每次这么操作略麻烦，可以通过在ssh配置文件简化：</p>

<pre><code>Host bastion  
        HostName 192.168.1.1  
        HostKeyAlias bastion  
        LocalForward 9999 target:22  
</code></pre>

<p>那么建立proxy就只是<code>ssh user@bastion</code>就可以了，然后同理去<code>ssh -p 9999 user@0</code>。
这么做的坏处在于<code>~/.ssh/config</code>配置可能会迅速膨胀，同时，每次还是启动两个进程去完成这件事情，不开心。</p>

<p>于是，我们的安全大神介绍一个更加简单的方法，在<code>~/.ssh/config</code>中，加入下面的内容:</p>

<pre><code>Host */*   
        ProxyCommand ssh $(dirname %h) -W $(basename %h):%
</code></pre>

<p>如此我就可以通过<code>ssh user@bastion/target</code>的方式直接ssh到远程主机，<code>ProxyCommand</code>指令会
生成两个进程，后台proxy进程，前台的进程直接通过proxy连接到目标主机。这样从命令行窗口看来我只
是打开了一个会话。同时，你可以链接很多个主机，如<code>ssh user@bastion/targetA/targetB/targetC</code>。
依次通过前一个主机建立的proxy连接到后面的主机上。</p>

<p>这个方法有一些局限：</p>

<ol>
<li>不能在主机链上指定不同的端口；</li>
<li>不能对不同的主机使用不同的登录用户名；</li>
<li>不同链上建立的连接不能重用已经建立的连接，这可能会导致连接的速度减缓；</li>
<li>其实还有个问题就是不能很容易的从<code>targetC</code>退出到 <code>targetB</code>…… (我想的)</li>
</ol>


<p>为了解决这些问题，大神想出了终极解决方案:
<code>
Host */*  
    ControlMaster auto  
    ControlPath   ~/.ssh/.sessions/%r@%h:%p  
    ProxyCommand /bin/sh -c 'mkdir -p -m700 ~/.ssh/.sessions/"%r@$(dirname %h)" &amp;&amp; exec ssh -o "ControlMaster auto" -o "ControlPath   ~/.ssh/.sessions/%r@$(dirname %h):%p" -o "ControlPersist 120s" -l %r -p %p $(dirname %h) -W $(basename %h):%p'
</code></p>

<ol>
<li><code>Host */*</code>: 匹配ssh到<code>A/B/X</code>这样的主机类型，然后递归的ssh到链中的主机；</li>
<li><code>ControlMaster auto</code>: 这个指令的意思是指ssh应当复用已有的control channel连接远程主
机，如果这样的channel不存在，则重新创建，以便以后的链接复用；</li>
<li><code>ControlPath ~/.ssh/.sessions/%r@%h:%p</code>: 这个指令告诉ssh control channel socket
文件的位置。对于每个远程主机，socket文件应该是唯一的，如此我们可以重用已有连接并且跳过验证。所
以我们用<code>%r</code>(remote login name),<code>%h</code>(remote host name)和<code>%p</code>(端口)作为文件名的部分。
唯一的问题是因为路径中的<code>/</code>，这里会在<code>%h</code>被当成一个目录，但是ssh不会自动创建目录；</li>
<li><code>ProxyCommand blah</code>: 命令开始时就先创建了所有必须的目录。 <code>ControlPersist</code>的意思是如果
control channel 2分钟内没有活动则停止ssh进程。如果你有两个会话<code>bastion/HostA</code>和
<code>bastion/HostB</code>，如果不配置<code>ControlPersist</code>，结束第一个进程时第二进程也会同时被干掉。</li>
</ol>


<p>所以，当你用上面的配置去<code>ssh user@bastion/A/B/C</code>时:</p>

<ol>
<li>ssh 匹配到了<code>*/*</code>模式</li>
<li>ssh 尝试重用<code>~/.ssh/.sessions/user@bastion/A/B/C:22</code>的socket，如果成功则建立连接，
没有则继续执行</li>
<li>ssh执行<code>ProxyCommand</code>中的内容， 创建目录同时递归的ssh到最终的主机C</li>
<li>然后ssh在主机C上进行身份验证，成功则创建<code>~/.ssh/.sessions/user@bastion/A/B/C:22</code>的
control channel socket文件，并且成为control channel的master</li>
<li>显示命令行提示符</li>
</ol>


<p>你现在有没有和我一样晕，在和大神交流一番后，大神告诉我一个改进版的配置:</p>

<pre><code>Host */*  
        ControlMaster auto  
        ProxyCommand    /usr/bin/ssh -o "ControlMaster auto" -o "ControlPath ~/.ssh/.sessions/%%C" -o "ControlPersist 120s" -l %r -p %p $(dirname %h) -W $(basename %h):%p

Host *
        ControlPath     ~/.ssh/.sessions/%C
</code></pre>

<p>这个配置要简单些，不过他假设你已经创建了<code>~/.ssh/.sessions</code>目录。</p>

<p>荣耀归于Dmitry大神，虽然那个ssh keypair我还没有删除……。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Copy/paste Keys From Chatting Tools]]></title>
    <link href="http://iambowen.github.com/ssh/practice/2015/12/17/dont-copy-slash-paste-keys-from-chatting-tools"/>
    <updated>2015-12-17T19:58:30+11:00</updated>
    <id>http://iambowen.github.com/ssh/practice/2015/12/17/dont-copy-slash-paste-keys-from-chatting-tools</id>
    <content type="html"><![CDATA[<p>今天，别的组的同事过来问我一个关于SSH的问题，问题是这样的:</p>

<ol>
<li>客户把AWS的ssh instance的private key通过slack拷给了同事；</li>
<li>同事发现用部署工具<a href="http://www.fabfile.org/">fabric</a>可以使用该key，ssh到EC2的instance上进行部署；</li>
<li>但是如果使用key去ssh(如<code>ssh -i key user@instance</code>)到EC2的instance，就会提示输入<code>passphrase</code></li>
<li>客户的Ops很肯定说这个private key没有加<code>passphrase</code></li>
</ol>


<p>这个问题很有趣，我先查看了下key，在我的印象里，如果在<code>ssh-keygen</code>的时候加入密码保护了，private
key 中会有如下的额外信息:</p>

<pre><code>-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: AES-128-CBC,B88893260B6CCFDC6304101075B74A9F
.....
</code></pre>

<p>但是同事给我的private key中没有.</p>

<p>在不同的系统下尝试用该key去ssh到EC2 instance得到的结果都是需要输入passpharse,通过输入冗余
ssh信息<code>ssh -vvvv</code>也没有看到什么有用信息(其实是我忽略了)。</p>

<p>google搜索，猜测会不会是key generate时候的格式不同导致的，但是觉得这种可能性不高。</p>

<p>在客户的ops channel询问了下，有人给出了这个建议，用
<code>
openssl rsa -text -noout -in KEYFILE
</code>
去检查key的完整性,返回结果如下:</p>

<pre><code>[vagrant@localhost ~]$ openssl rsa -text -noout -in id_rsa
unable to load Private Key
140516793460640:error:0906D066:PEM routines:PEM_read_bio:bad end line:pem_lib.c:802:
</code></pre>

<p>实际上这个信息已经比较明显了，另外有人也从ssh debug的信息中指出:</p>

<pre><code>debug1: key_parse_private2: missing begin marker
debug1: key_parse_private_pem: PEM_read_PrivateKey failed
</code></pre>

<p>private key的开始或者结束的marker出问题了，于是客户询问这个key是不是从slack拷贝过去的，因为
聊天工具有时候会自动纠错，把结束的marker <code>----</code>自动改成<code>——</code>，他曾经就遇到过这种情况。
再看一遍private key，果然是这样……好羞愧。修改后，果然可以顺利ssh 到instance上了。
(更正下，虽然他指出了问题的来源，但是这段debug信息，在private key是完整的情况下仍然存在，所以这不是key出错的绝对证据。)</p>

<p>从这个事情中，我们可以得到一些教训</p>

<ol>
<li>不要用聊天工具copy/paste private key或者代码之类的东西，很容易引起错误。</li>
<li>同时，这种方式也很不安全，尽量不要这么做，要么在传递完后迅速删除聊天记录</li>
<li>或者使用一个公共的key管理的服务，如<a href="http://rattic.org/">rattic</a>，或者使用临时生成的credential来ssh，如这个<a href="https://github.com/realestate-com-au/sshephalopod">项目</a>进一步提高安全性。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Essential SSH]]></title>
    <link href="http://iambowen.github.com/ssh/2015/01/08/essential-ssh"/>
    <updated>2015-01-08T00:00:00+11:00</updated>
    <id>http://iambowen.github.com/ssh/2015/01/08/essential-ssh</id>
    <content type="html"><![CDATA[<h1>什么是SSH</h1>

<hr />

<ul>
<li><p><a href="http://en.wikipedia.org/wiki/Secure_Shell">Secure Shell (SSH)</a>* 是一种加密网络协议，主要用作以下用途:</p></li>
<li><p>secure data communication  (安全数据传输)</p></li>
<li>remote command-line login  (远程命令行登陆)</li>
<li>remote command execution   (远程命令执行)</li>
<li>other secure network services between two networked computers  (节点间安全网络服务)</li>
</ul>


<p>相比telnet，ftp这些明文传输的协议，SSH要安全的多。</p>

<h1>基本工作原理</h1>

<hr />

<p>SSH是传输层协议，有不同的版本(有SSH1和SSH2)，SSH协议框架分为三部分:</p>

<ol>
<li>传输层协议: 提供正向加密(如果一次会话被破解，不会影响到前面会话的安全性)的服务器验证，数据安全性，数据完整性。还可以提供压缩功能。</li>
<li>用户认证协议: 连接服务器的用户验证。</li>
<li>连接协议: 在底层的SSH链接基础上的多路复用的多个逻辑链路。</li>
</ol>


<p>SSH连接过程如下图：
<img src="/images/ssh.jpeg" alt="ssh connection" /></p>

<p>大致可以分为如下的步骤：</p>

<ol>
<li>TCP 3次握手建立连接</li>
<li>版本号协商，让客户端和服务器端使用相同的协议版本通信</li>
<li>客户端和服务器端为使用公钥算法，加密算法等协商，得出最终要使用的算法</li>
<li>秘钥交换阶段，首先客户端会在 <code>~/.ssh/known_hosts</code>等文件中查找服务器主机信息</li>
<li>如果没有找到，则提示客户端是否接受服务器签名，接受服务器的public key(<code>/etc/ssh/ssh_host_rsa_key.pub</code>),该key会被保存到<code>~/.ssh/known_hosts</code></li>
<li>如果找到，服务器和客户端用算法(如Diffie–Hellman算法)交换秘钥，生成会话秘钥和会话ID，其中ID用于认证过程，会话秘钥用于数据的加密解密</li>
<li>用户认证阶段，有两种方式，一种是public key的验证方式，如果服务器在自己的<code>~/.ssh/authorized_keys</code>等文件中没有找到客户端的public key，验证失败，反之则成功；</li>
<li>public key 认证失败后，会回退到密码认证，这个过程是加密的</li>
<li>认证完成后就是会话请求以及交互会话阶段，数据双向加密传输，服务器端执行从客户端传输的命令，然后将结果返回给客户端</li>
</ol>


<p>以上只是ssh会话过程的一个简单描述，其实过程远比这个复杂，如果对细节比较关心，除了查阅材料，还可以让ssh打印冗余信息，来获取交互过程中具体发生的事情。</p>

<pre><code class="bash">[vagrant@bogon ~]$ ssh -vvv localhost
OpenSSH_5.3p1, OpenSSL 1.0.1e-fips 11 Feb 2013
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: Applying options for *
debug2: ssh_connect: needpriv 0
debug1: Connecting to localhost [::1] port 22.
debug1: Connection established.
debug1: identity file /home/vagrant/.ssh/identity type -1
debug1: identity file /home/vagrant/.ssh/identity-cert type -1
debug1: identity file /home/vagrant/.ssh/id_rsa type -1
debug1: identity file /home/vagrant/.ssh/id_rsa-cert type -1
debug1: identity file /home/vagrant/.ssh/id_dsa type -1
debug1: identity file /home/vagrant/.ssh/id_dsa-cert type -1
debug1: Remote protocol version 2.0, remote software version OpenSSH_5.3
..........
</code></pre>

<p>传输过程中数据一致性的保证，是通过计算所传输数据的校验码，md5等，传输完成后比对，就可以知道数据是不是完整的，有没有被更改。</p>

<h2>生成key pair</h2>

<hr />

<p>用 <code>ssh-keygen</code>命令就可以生成一对key/pair，加密的算法和长度都是可选的，也可以选择对private key做密码保护，默认生成的key pair是在home目录的的<code>.ssh</code>目录下。</p>

<pre><code class="bash">[vagrant@bogon ~]$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/home/vagrant/.ssh/id_rsa): something
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in something.
Your public key has been saved in something.pub.
The key fingerprint is:
a5:0d:9d:f7:9a:c7:55:3b:8f:d3:6e:73:92:4e:b1:aa vagrant@bogon.something.com
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|         . .     |
|        . + .   .|
|         = . .  o|
|        S .   oo.|
|             + *o|
|            o B.o|
|             +o+o|
|          E....o+|
+-----------------+
</code></pre>

<p>默认生成的key pair为<code>~/.ssh/id_rsa</code>和<code>~/.ssh/id_rsa.pub</code></p>

<h2>服务器端配置文件</h2>

<hr />

<p>对于服务器端来说，配置文件在<code>/etc/ssh</code>目录下，其中<code>sshd_config</code>包含所有的配置，选项很多，举个简单的例子，企业版的Github的ssh服务运行在不同的
端口，如61000，那么修改配置文件<code>sshd_config</code>:</p>

<pre><code class="bash">Port 61000
</code></pre>

<p>重启sshd</p>

<pre><code class="bash">service sshd restart
</code></pre>

<p>之后就可以通过61000端口进行ssh连接</p>

<pre><code class="bash">ssh -p 61000
</code></pre>

<h2>客户端配置文件</h2>

<hr />

<p>客户端的配置文件默认在<code>~/.ssh/</code>目录下，其中<code>known_hosts</code>放置remote host及其public key，<code>authorized_keys</code>文件保存允许以public key验证方式登陆的主机。
主要的配置文件是<code>~/.ssh/config</code>，其中可以设置remote host相关信息等， 如下:</p>

<pre><code class="bash">Host remotehost
  User user
  Port 7777
  HostName remotehost.example.com
</code></pre>

<p>如果没有以上的配置，那么想ssh到<code>remotehost.example.com</code>就需要以下的操作:</p>

<pre><code class="bash">ssh -p 7777 user@remotehost.example.com
</code></pre>

<p>加入以上配置后，就只需像下面一样:</p>

<pre><code class="bash">ssh remotehost
</code></pre>

<h2>远程命令执行</h2>

<hr />

<p>其实比较简单了，将要执行的命令放在最后就可以了</p>

<pre><code class="bash">ssh user@remotehost 'yum install -y package'
</code></pre>

<p>这种用法常见于自动化脚本中，或者登录到服务器时不需要执行交互式命令，如重启服务，安装包之类的。</p>

<h2>以public key验证方式登陆远程服务器</h2>

<hr />

<p>其实就是将客户端的public key加入服务器端的<code>~/.ssh/authorized_keys</code>文件中，有以下两种方式:</p>

<pre><code class="bash">ssh-copy-id user@remotehost
</code></pre>

<p>或者土一点</p>

<pre><code class="bash">cat ~/.ssh/id_rsa.pub | ssh user@remotehost 'cat &gt;&gt; ~/.ssh/authorized_keys'
</code></pre>

<p>这样就可以实现无密码登陆服务器。我们的测试环境在亚马逊的AWS上，为了使用统一的工具去远程登陆所有的主机，在用亚马逊的API生成instance时候，同时将预先生成的public key放在instance的<code>authorized_keys</code>文件中，在工具远程登陆instance时，使用了下面的命令:</p>

<pre><code class="bash">ssh -i private_key user@instance
</code></pre>

<p>既可以实现对测试环境下所有主机的访问。</p>

<h2>Forward Agent</h2>

<hr />

<p>现实中有如下的一种使用场景，本机可以public key验证方式登陆remotehost1和remotehost2，但是从remotehost1到remotehost2必须以密码验证的方式登陆。这个问题可以通过forward agent解决，一种是用<code>ssh-add</code>添加private key:</p>

<pre><code class="bash">ssh-add ~/.ssh/id_rsa
</code></pre>

<p>然后在ssh到remotehost1时启用forward agent:</p>

<pre><code class="bash">ssh -A user@remotehost1
</code></pre>

<p>如此在登陆到remotehost1时，可以直接ssh到remotehost2而不需要输入密码，在remotehost1上面输入<code>ssh-add -l</code>可以发现本机的private key被带到了remotehost1上。</p>

<p>另一种是修改本机的ssh配置文件，针对remotehost1开启forward agent:</p>

<pre><code class="bash">Host remotehost1
  User user
  HostName remotehost1
  ForwardAgent yes
</code></pre>

<p>就不再需要加 <code>-A</code>的选项了。</p>

<h2>建立socket proxy</h2>

<hr />

<p>ssh强大的地方在于它可以的很容易建立起隧道或者socket代理，如果你有一个在国外的vps，分分钟就可以建立一个安全的代理，访问到墙外的网站。</p>

<pre><code class="bash">ssh -D 8888 user@remotehost
</code></pre>

<p>执行完这个命令后，一个socket代理就搭建完成，在Firefox的网络设置中，配置socket代理，服务器为 127.0.0.1 端口为8888，就可以使用了。注意，
这个socket代理在Chrome下的的一些proxy插件如SwitchSharp下不工作，原因不太清楚。</p>

<h2>SSH 端口转发</h2>

<hr />

<p>为了方便访问内网的产品环境的服务器，通常我们都会设置一些跳转机(bastion)，只有登录到这台机器上时才能去访问内网的其他服务器。有这样的一种应用场景，
我希望访问在内网的staging环境的mysql_server服务器，但是我只有bastion机器的访问权限，怎么办呢，可以通过port forwarding来解决。</p>

<pre><code class="bash">ssh -L 33306:mysql_server:3306 bastion -luser
</code></pre>

<p>之后用mysql客户端就可以连接本地的33306端口来访问数据库，所有的请求通过bastion机器转发给mysql_server.</p>

<pre><code class="bash">mysql -h 127.0.0.1 -p 33306 -u user -p
</code></pre>

<p>除了远程的端口转发，本地也可以做类似的事情。比如现在有这么一种需求，我希望本地开发环境的服务器运行在80端口，而通常这些服务器在开发模式都运行<code>&gt;1024</code>的端口下，这个也可以通过端口转发来完成:</p>

<pre><code class="bash">python -m SimpleHTTPServer   # 启动在8000端口

sudo ssh -L 80:127.0.0.1:8000 user@127.0.0.1
</code></pre>

<p>如此就可以在浏览器输入<code>localhost</code>去访问服务，不需要再加端口号。当然，实现这个需求的方式有很多种，如iptables等，这里讲的只是其中一种方法。</p>

<h2>SSH 反向端口转发</h2>

<hr />

<p>基于IPv4地址数量以及安全的考虑，公司或者学校的网络都是通过NAT管理的，出口的IP地址可能只有几个。可以用:</p>

<pre><code class="bash">curl ifconfig.me/ip
</code></pre>

<p>获取自己的NAT ip地址。
如果我想在自己家中访问到公司的网络，那么可以用反向端口转发的方式在NAT上打个“洞”。假设家里的路由器已开通了DDNS服务，域名为<code>home.oicp.net</code>，那么我可以在公司的主机上做如下的事情:</p>

<pre><code class="bash">ssh -R 8888:127.0.0.1:22 user@home.oicp.net
</code></pre>

<p>如此，我就建立了一个反向连接的隧道，从家中的路由器服务器上，我做如下的操作:</p>

<pre><code class="bash">ssh -p 8888 user@127.0.0.1
</code></pre>

<p>就可以访问到公司的主机了。 同理，可以通过类似的方式访问到公司内部的资源或者一些服务，前提是公司没有提供VPN，否则不推荐这种方式，不符合安全守则。</p>

<h2>文件传输</h2>

<hr />

<p>用ssh进行文件传输，一般我们听到这个时候都会想到<code>scp</code>或者<code>rsync</code>，其实ssh也可以，只不过方式略微hack一些。</p>

<pre><code class="bash">tar cvf file | ssh user@remotehost 'tar xv '
</code></pre>

<p>其实就是用tar命令将文件打包然后写到标准输入，再经由管道在远程机器解开文件。虽然这是通过加密方式传输，但始终觉得这种方式不甚靠谱，一旦传输因为网络原因断开，就得重新传输，不能续传。</p>

<h2>总结</h2>

<p>ssh常见的用法大概就是这些，详细的原理以及其他用法可以参见后面给出的一些链接。</p>

<h2>references</h2>

<hr />

<p><a href="https://www.digitalocean.com/community/tutorials/ssh-essentials-working-with-ssh-servers-clients-and-keys">1</a>
<a href="http://www.cisco.com/web/about/ac123/ac147/archived_issues/ipj_12-4/124_ssh.html">2</a>
<a href="http://newfdawg.com/docs/HP-SSH_Explained.PDF">3</a>
<a href="http://www.wildlee.org/2011_03_1305.html">4</a>
<a href="http://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2%EF%BC%8D%E8%B5%AB%E5%B0%94%E6%9B%BC%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2">5</a></p>
]]></content>
  </entry>
  
</feed>
